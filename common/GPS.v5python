{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\n\n\nbrain=Brain()\nleft_wheel = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_wheel = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\ndriver = DriveTrain(left_wheel, right_wheel, 319.19, 295, 40, MM, 1)\ndrivertrain_gps = Gps(Ports.PORT5, 0.00, 200.00, MM, 180)\n\nx = 0\ny = 0\nhead = 0\ncount = 0\na = 0\nb = 0\nc = 0 \ncorrect_angle_in_radian = 0\ndef position():\n    global x\n    global y \n    global head\n    global correct_angle_in_radian\n    global a\n    global b\n    global c\n    x0 = -1100\n    y0 = 0\n\n    x = drivertrain_gps.x_position(MM)\n    y = drivertrain_gps.y_position(MM)\n    head = drivertrain_gps.heading()\n    a = abs(x-x0)\n    c = abs(y-y0)\n    b = math.sqrt(math.pow(a,2)+math.pow(c,2))\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print('x: ',x)\n    brain.screen.print(' y: ',y)\n    brain.screen.print(' head: ',head)\n    return head\n    \n\ndef theta():\n    position()\n    global a\n    global b\n    global c\n\n    cos = a/b\n    correct_angle_in_radian = math.acos(cos)\n    correct_angle_in_radian = math.degrees(correct_angle_in_radian)\n    return correct_angle_in_radian\n\nstartCorrecting = True\ncontroller = Controller()\n\nwhile True:\n    if controller.buttonA.pressing():\n        startCorrecting = True\n        while startCorrecting:\n            position()\n            if not (head < 273 and head > 267):\n                driver.turn_for(LEFT, 5, DEGREES)\n            else: \n                driver.stop()\n                startCorrecting = False\n                break\n\n        position()\n        if y > 0:\n            turn_for_correction = 270 - theta()\n            while not(position() < turn_for_correction + 5 and position() > turn_for_correction - 5):\n                driver.turn_for(LEFT, 5, DEGREES)\n\n        else :\n            turn_for_correction = 270 + theta()\n            while not(position() < turn_for_correction + 5 and position() > turn_for_correction - 5):\n                driver.turn_for(RIGHT, 5, DEGREES)\n\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(\"turn : \", turn_for_correction)\n\n        driver.stop()\n        position()\n        while x > -650:\n            position()\n            driver.drive(FORWARD, 30)\n\n        driver.stop()","textLanguage":"python","rconfig":[{"port":[5],"name":"gps_5","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"-180","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}