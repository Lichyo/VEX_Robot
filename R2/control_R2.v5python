{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nfrom vex import *\n\nbrain = Brain()\ncontroller = Controller()\nleft_wheel = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_wheel = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n\nmiddle_wheel = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\ndrive_horizontal = DriveTrain(middle_wheel, middle_wheel, 319.19, 295, 40, MM, 1)\n\ndrive_vertical = DriveTrain(left_wheel, right_wheel, 319.19, 295, 40, MM, 1)\n\nthrow_motor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True) \nthrow = DriveTrain(throw_motor, throw_motor,319.19, 295, 40, MM, 1)\n\naccepter_motor = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)\naccepter = DriveTrain(accepter_motor, accepter_motor,319.19, 295, 40, MM, 1)\n\naxis_l_vertical = 0\naxis_l_horizontal = 0 \naxis_r_vertical = 0\naxis_r_horizontal = 0\n\nlast_state = ''\ncurrent_state = ''\n\nis_accepter_activated = 0\n\nglobal vertical_l_velocity\nglobal horizontal_r_velocity\n\n\ndef move_forward():\n    drive_vertical.drive(FORWARD, change_v_velocity())\ndef move_backward():\n    drive_vertical.drive(REVERSE, change_v_velocity())\ndef turn_left():\n    drive_vertical.turn(LEFT, 40)\ndef turn_right():\n    drive_vertical.turn(RIGHT, 40)\n\ndef move_left():\n    drive_horizontal.drive(FORWARD,80)\ndef move_right():\n    drive_horizontal.drive(REVERSE,80)\n\ndef change_v_velocity():\n\n    if current_state == 'f':\n        vertical_l_velocity = 100\n        vertical_l_velocity = abs(vertical_l_velocity * (axis_l_vertical / 100))\n        return vertical_l_velocity\n    else:\n        vertical_l_velocity = 100\n        vertical_l_velocity = abs(vertical_l_velocity * (axis_l_vertical / 100))\n        return vertical_l_velocity\n\ndef change_h_velocity():\n    horizontal_r_velocity = 120\n    horizontal_r_velocity = abs(horizontal_r_velocity * (axis_r_horizontal / 100))\n    return horizontal_r_velocity\n\ndef slow_if_ineed():\n    global current_state\n    global last_state\n    if current_state != last_state :\n        if current_state == 'f':\n            drive_vertical.drive(FORWARD,30)\n            # drive_vertical.set_stopping(COAST)\n            # drive_vertical.stop()\n            # wait(0.2,SECONDS)\n        else:\n            drive_vertical.set_stopping(COAST)\n            drive_vertical.stop()\n            wait(0.1,SECONDS)\n\nwhile True:\n    axis_l_vertical = controller.axis3.position()\n    axis_l_horizontal = controller.axis4.position()\n    axis_r_horizontal = controller.axis1.position()\n    change_v_velocity()\n    change_h_velocity()\n    # brain.screen.set_cursor(1,1)\n    # brain.screen.print('3.',axis_l_vertical)\n    # brain.screen.print('  4.',axis_l_horizontal)\n    # brain.screen.print('  1.',axis_r_horizontal)\n    # wait(0.2,SECONDS)\n    # brain.screen.clear_screen()\n\n    if axis_l_vertical > 20 and axis_l_horizontal > 20 :\n        left_wheel.set_velocity(70,PERCENT)\n        right_wheel.set_velocity(40,PERCENT)\n        left_wheel.spin(FORWARD)\n        right_wheel.spin(FORWARD)\n    elif axis_l_vertical > 20 and axis_l_horizontal < -20 :\n        left_wheel.set_velocity(40,PERCENT)\n        right_wheel.set_velocity(70,PERCENT)\n        left_wheel.spin(FORWARD)\n        right_wheel.spin(FORWARD)\n    elif axis_l_vertical < -20 and axis_l_horizontal > 20 :\n        left_wheel.set_velocity(70,PERCENT)\n        right_wheel.set_velocity(40,PERCENT)\n        left_wheel.spin(REVERSE)\n        right_wheel.spin(REVERSE)\n    elif axis_l_vertical < -20 and axis_l_horizontal < -20 :\n        left_wheel.set_velocity(40,PERCENT)\n        right_wheel.set_velocity(70,PERCENT)\n        left_wheel.spin(REVERSE)\n        right_wheel.spin(REVERSE)\n    elif axis_l_vertical > 20 :\n        current_state = 'f'\n        slow_if_ineed()\n        move_forward()\n        last_state = 'f'\n    elif axis_l_vertical < -20 :\n        current_state = 'b'\n        slow_if_ineed()\n        move_backward()\n        last_state = 'b'\n    elif axis_l_horizontal > 20 :\n        current_state = 'tr'\n        slow_if_ineed()\n        turn_right()\n        last_state = 'tr'\n    elif axis_l_horizontal < -20 :\n        current_state = 'tl'\n        slow_if_ineed()\n        turn_left()\n        last_state = 'tl'\n    else :\n        drive_vertical.stop()\n\n\n    if axis_r_horizontal > 20 :\n        current_state = 'r'\n        slow_if_ineed()\n        move_right()\n        last_state = 'r'\n    elif axis_r_horizontal <-20 :\n        current_state = 'l'\n        slow_if_ineed()\n        move_left()\n        last_state = 'l'\n    else :\n        drive_horizontal.stop()\n\n\n    if controller.buttonL1.pressing():\n        if is_accepter_activated == 0:\n            # accepter_motor.set_velocity(100,PERCENT)\n            # accepter_motor.spin(FORWARD)\n            accepter.drive(FORWARD,100)\n            wait(0.2,SECONDS)\n            is_accepter_activated = 1\n        else:\n            accepter.stop()\n            wait(0.2,SECONDS)\n            is_accepter_activated = 0\n    elif controller.buttonL2.pressing():\n        if is_accepter_activated == 0:\n            # accepter_motor.set_velocity(100,PERCENT)\n            # accepter_motor.spin(REVERSE)\n            accepter.drive(REVERSE,100)\n            wait(0.2,SECONDS)\n            is_accepter_activated = 1\n        else:\n            accepter_motor.stop()\n            wait(0.2,SECONDS)\n            is_accepter_activated = 0\n    \n    if controller.buttonR1.pressing():\n        throw_motor.set_velocity(100,PERCENT)\n        throw_motor.spin(FORWARD)\n    else :\n        throw_motor.stop()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # if axis_l_vertical > 10 :\n    #     current_state = 'f'\n    #     slow_if_ineed()\n    #     move_forward()\n    #     last_state = 'f'\n    # elif axis_l_vertical < -10 :\n    #     current_state = 'b'\n    #     slow_if_ineed()\n    #     move_backward()\n    #     last_state = 'b'\n    # elif axis_l_horizontal > 10 :\n    #     current_state = 'tr'\n    #     slow_if_ineed()\n    #     turn_right()\n    #     last_state = 'tr'\n    # elif axis_l_horizontal < -10 :\n    #     current_state = 'tl'\n    #     slow_if_ineed()\n    #     turn_left()\n    #     last_state = 'tl'\n    # else :\n    #     drive_vertical.stop()\n    \n    # if axis_r_horizontal > 10 :\n    #     current_state = 'r'\n    #     slow_if_ineed()\n    #     move_right()\n    #     last_state = 'r'\n    # elif axis_r_horizontal <-10 :\n    #     current_state = 'l'\n    #     slow_if_ineed()\n    #     move_left()\n    #     last_state = 'l'\n    # else :\n    #     drive_horizontal.stop()\n\n\n    # if controller.buttonL1.pressing():\n    #     # accepter.drive(FORWARD, 100)\n    #     accepter_motor.set_velocity(100,PERCENT)\n    #     accepter_motor.spin(FORWARD)\n    # elif controller.buttonL2.pressing():\n    #     accepter_motor.set_velocity(100,PERCENT)\n    #     accepter_motor.spin(REVERSE)\n    # else :\n    #     accepter_motor.stop()\n    \n    # if controller.buttonR1.pressing():\n    #     # throw.drive(FORWARD, 100)\n    #     throw_motor.set_velocity(100,PERCENT)\n    #     throw_motor.spin(FORWARD)\n    # else :\n    #     throw_motor.stop()\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}