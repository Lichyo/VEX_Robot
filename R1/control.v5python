<<<<<<< HEAD
{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\n\ncontroller = Controller()\nbrain = Brain()\nleft_wheel = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_wheel = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\ndriver = DriveTrain(left_wheel, right_wheel, 319.19, 295, 40, MM, 1)\n# right_driver = DriveTrain(right_wheel, right_wheel, 319.19, 295, 40, MM, 1)\n# left_driver = DriveTrain(left_wheel, left_wheel, 319.19, 295, 40, MM, 1)\nclaw_ = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nclaw = DriveTrain(claw_, claw_, 319.19, 295, 40, MM, 1)\ngraper = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\n\n\n\naxis_vertical = 0\naxis_horizontal = 0\naxis_r_vertical = 0\naxis_r_horizontal = 0\n\nis_graper_forwarding = False\nis_graper_reversing = False\nglobal vertical_velocity\nglobal horizontal_velocity\nglobal current_state\nglobal is_claw_activated\n\ncurrent_state = ''\nis_claw_activated = False\ngraper.set_stopping(COAST)\ngraper.set_velocity(60, PERCENT)\nclaw.set_stopping(HOLD)\n\ndef move_forward():\n    driver.drive(FORWARD, change_v_velocity())\n\ndef move_reverse():\n    driver.drive(REVERSE, change_v_velocity())\n\ndef turn_right():\n    driver.turn(RIGHT, 50)\n\ndef turn_left():\n    driver.turn(LEFT, 50)\n\ndef upadate_axis_value():\n    global axis_vertical\n    global axis_horizontal\n    axis_vertical = controller.axis3.position()\n    axis_horizontal = controller.axis4.position()\n\ndef change_v_velocity():\n    vertical_velocity = 130\n    vertical_velocity = abs(vertical_velocity * (axis_vertical / 100))\n    return vertical_velocity\n\ndef change_h_velocity():\n    horizontal_velocity = 40\n    horizontal_velocity = abs(horizontal_velocity * (axis_horizontal / 100))\n    return horizontal_velocity\n\ndef slow_if_in_need(state):\n    global current_state\n    if current_state != state:\n        driver.set_stopping(COAST)\n        driver.stop()\n        wait(0.1, SECONDS)\n    current_state = state\n\ndef claw_activating():\n    global is_claw_activated\n    claw.set_stopping(COAST)\n    claw.drive_for(FORWARD, 840, MM)\n    claw.stop()\n    wait(1, SECONDS)\n    claw.drive_for(REVERSE,125,MM)\n    wait(0.1,SECONDS)\n    claw.set_stopping(HOLD)\n    wait(0.1,SECONDS)\n    claw.stop()\n    is_claw_activated = True\n\ndef claw_deactivating():\n    global is_claw_activated\n    claw.set_stopping(COAST)\n    claw.drive_for(REVERSE, 750, MM)\n    claw.stop()\n    is_claw_activated = False \n    \nwhile True:\n    axis_horizontal = controller.axis4.position()\n    axis_vertical = controller.axis3.position()\n    change_v_velocity()\n    change_h_velocity()\n\n    if axis_vertical > 10 and axis_horizontal > 10:\n        state = 'rf'\n        left_wheel.set_velocity(70, PERCENT)\n        right_wheel.set_velocity(40, PERCENT)\n        slow_if_in_need(state)\n        left_wheel.spin(FORWARD)\n        right_wheel.spin(FORWARD)\n    elif axis_vertical > 10 and axis_horizontal < -10:\n        state = 'lf'\n        right_wheel.set_velocity(70, PERCENT)\n        left_wheel.set_velocity(40, PERCENT)\n        slow_if_in_need(state)\n        right_wheel.spin(FORWARD)\n        left_wheel.spin(FORWARD)\n    elif axis_vertical < -70 and (axis_horizontal > 60 and axis_horizontal < 90):\n        state = 'rr'\n        left_wheel.set_velocity(70, PERCENT)\n        right_wheel.set_velocity(40, PERCENT)\n        slow_if_in_need(state)\n        left_wheel.spin(REVERSE)\n        right_wheel.spin(REVERSE)\n    elif axis_vertical < -70 and (axis_horizontal < -60 and axis_horizontal > -90):\n        state = 'lr'\n        right_wheel.set_velocity(70, PERCENT)\n        left_wheel.set_velocity(40, PERCENT)\n        slow_if_in_need(state)\n        left_wheel.spin(REVERSE)\n        right_wheel.spin(REVERSE)\n    elif axis_vertical > 10:\n        state = 'forward'\n        slow_if_in_need(state)\n        move_forward()\n    elif axis_horizontal > 10:\n        state = 'right'\n        slow_if_in_need(state)\n        turn_right()\n    elif axis_vertical < -10:\n        state = 'reverse'\n        slow_if_in_need(state)\n        driver.drive(REVERSE, 50)\n    elif axis_horizontal < -10:\n        state = 'left'\n        slow_if_in_need(state)\n        turn_left()\n    else:\n        driver.stop()\n\n    if controller.buttonL1.pressing():\n        if not is_graper_forwarding:\n            graper.spin(FORWARD)\n            wait(0.3, SECONDS)\n            is_graper_forwarding = True\n        else:\n            graper.stop()\n            wait(0.3, SECONDS)\n            is_graper_forwarding = False\n    elif controller.buttonL2.pressing():\n        if not is_graper_reversing:\n            graper.spin(REVERSE)\n            wait(0.3, SECONDS)\n            is_graper_reversing = True\n        else:\n            graper.stop()\n            wait(0.3, SECONDS)\n            is_graper_reversing = False\n\n    if controller.buttonR1.pressing():\n        if not is_claw_activated:\n            claw_activating()\n    elif controller.buttonR2.pressing():\n        if is_claw_activated:\n            claw_deactivating()\n    else:\n        claw.stop()","textLanguage":"python","rconfig":[],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}
=======
{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\n\ncontroller = Controller()\nbrain = Brain()\nleft_wheel = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_wheel = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\ndriver = DriveTrain(left_wheel, right_wheel, 319.19, 295, 40, MM, 1)\nright_driver = DriveTrain(right_wheel, right_wheel, 319.19, 295, 40, MM, 1)\nleft_driver = DriveTrain(left_wheel, left_wheel, 319.19, 295, 40, MM, 1)\nclaw_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\ngraper_motor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nclaw = DriveTrain(claw_motor, claw_motor, 319.19, 295, 40, MM, 1)\ngraper = DriveTrain(graper_motor, graper_motor, 319.19, 295, 40, MM, 1)\n\naxis_vertical = 0\naxis_horizontal = 0\naxis_r_vertical = 0\naxis_r_horizontal = 0\n\nglobal vertical_velocity\nglobal horizontal_velocity\n\ngraper.set_stopping(HOLD)\nclaw.set_stopping(HOLD)\ndriver.set_drive_velocity(100, PERCENT)\n\n\ndef move_forward():\n    # driver.drive(FORWARD, change_v_velocity())\n    driver.drive(FORWARD)\n\ndef move_reverse():\n    # driver.drive(REVERSE, change_v_velocity())\n    driver.drive(REVERSE)\n\ndef turn_right():\n    driver.turn(RIGHT, 50)\n\ndef turn_left():\n    driver.turn(LEFT, 50)\n\ndef upadate_axis_value():\n    global axis_vertical\n    global axis_horizontal\n    axis_vertical = controller.axis3.position()\n    axis_horizontal = controller.axis4.position()\n\ndef forward():\n    axis_value = controller.axis1.position\n\ndef change_v_velocity():\n    vertical_velocity = 130\n    vertical_velocity = abs(vertical_velocity * (axis_vertical / 100))\n    return vertical_velocity\n\ndef change_h_velocity():\n    horizontal_velocity = 40\n    horizontal_velocity = abs(horizontal_velocity * (axis_horizontal / 100))\n    return horizontal_velocity\n\n\n    \nwhile True:\n    # axis_r_vertical = controller.axis2.position()\n    axis_horizontal = controller.axis4.position()\n    axis_vertical = controller.axis3.position()\n    # axis_l_horizontal = controller.axis4.position()\n    change_v_velocity()\n    change_h_velocity()\n\n    if axis_vertical > 10 and axis_horizontal > 10:\n        # right forward\n        left_driver.drive(FORWARD, 80)\n        right_driver.drive(FORWARD, 120)\n    elif axis_vertical < -10 and axis_horizontal > 10:\n        # left reverse\n        left_driver.drive(REVERSE, 120)\n        right_driver.drive(REVERSE, 80)\n    elif axis_vertical < -10 and axis_horizontal < -10:\n        # right reverse\n        left_driver.drive(REVERSE, 80)\n        right_driver.drive(REVERSE, 120)\n    elif axis_vertical > 10 and axis_horizontal > 10:\n        # left forward\n        left_driver.drive(FORWARD, 120)\n        right_driver.drive(FORWARD, 80)\n    elif axis_vertical > 10:\n        move_forward()\n    elif axis_vertical < -10:\n        move_reverse()\n    elif axis_horizontal > 10:\n        turn_right()\n    elif axis_horizontal < -10:\n        turn_left()\n    else :\n        driver.stop()\n\n    if controller.buttonL1.pressing():\n        graper.drive(FORWARD, 150)\n    elif controller.buttonL2.pressing():\n        graper.drive(REVERSE, 150)\n    else :\n        graper.stop()\n    \n\n    if controller.buttonR2.pressing():\n        claw.drive(FORWARD, 130) \n    elif controller.buttonR1.pressing():\n        claw.drive(REVERSE, 130)\n    else:\n        claw.stop()\n    \n    \n\n\n    ","textLanguage":"python","rconfig":[],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}
>>>>>>> R1_with_GPS_and_Vision
