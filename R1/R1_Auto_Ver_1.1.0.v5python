{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# vex-vision-config:begin\nvision_1__SIG_1 = Signature(1, -4789, -4193, -4492,-5041, -4557, -4800,3.9, 0)\nvision_1 = Vision(Ports.PORT1, 50, vision_1__SIG_1)\ncontroller = Controller()\n\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_gps = Gps(Ports.PORT11, -160.00, 20.00, MM, 0)\ndriver = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_gps, 319.19, 320, 40, MM, 1)\n\nleft_wing = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)\nright_wing = Motor(Ports.PORT14, GearSetting.RATIO_18_1, True)\nwings = MotorGroup(left_wing, right_wing)\nwings.set_max_torque(100,PERCENT)\nwings.set_velocity(40,PERCENT)\nwings.set_timeout(1,SECONDS)\n\n\nglobal is_stretching\nglobal prepared\ndriver.set_drive_velocity(60, PERCENT)\ndriver.set_turn_velocity(30, PERCENT)\n\nglobal correct_angle_in_radian\nglobal a\nglobal b\nglobal c\nx0 = -1100\ny0 = 0\n\nprepared = False\nis_stretching = False\n\nclass Axis:\n    def __init__(self):\n        self.x0 = -1100\n        self.y0 = 0\n\n    def position(self): \n        self.x = drivetrain_gps.x_position(MM)\n        self.y = drivetrain_gps.y_position(MM)\n        self.head = drivetrain_gps.heading()\n        self.a = abs(self.x-x0)\n        self.c = abs(self.y-y0)\n        self.b = math.sqrt(math.pow(self.a,2)+math.pow(self.c,2))\n    \n    def set_quadrant(self):\n        self.position()\n        if self.x > 0:\n            if self.y > 0:\n                self.quadrant = 1\n            else:\n                self.quadrant = 4\n        else:\n            if self.y > 0:\n                self.quadrant = 2\n            else:\n                self.quadrant = 3\n\n    def info(self):\n        self.set_quadrant()\n        self.set_theta()\n        self.position()\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print('x: ',self.x)\n        brain.screen.next_row()\n        brain.screen.print('y: ',self.y)\n        brain.screen.next_row()\n        brain.screen.print('head: ',self.head)\n        brain.screen.next_row()\n        brain.screen.print('quadrant: ',self.quadrant)\n        brain.screen.next_row()\n        brain.screen.print('theta:' , self.theta)\n        brain.screen.next_row()\n        brain.screen.print('correct: ' , self.correct_angle_in_radian)\n        wait(0.3,SECONDS)\n\n    def set_theta(self):\n        self.set_quadrant\n        self.position()\n        cos = self.a/self.b\n        self.correct_angle_in_radian = math.acos(cos)\n        self.correct_angle_in_radian = math.degrees(self.correct_angle_in_radian)\n    \n        if self.quadrant == 1:\n            self.theta = 270 - self.correct_angle_in_radian\n        elif self.quadrant == 2:\n            self.theta = 270 - self.correct_angle_in_radian\n        elif self.quadrant == 3:\n            self.theta = 270 + self.correct_angle_in_radian\n        else:\n            self.theta = 270 + self.correct_angle_in_radian\n\ndef adjust_direction(axis):\n    timer = Timer()\n    driver.turn_to_heading(axis.theta,DEGREES)\n\ndef open_wings():\n    wings.spin_for(FORWARD,200,DEGREES)\n\ndef close_wings():\n    wings.spin_for(REVERSE,200,DEGREES)\n\naxis = Axis()\n\n# open_wings()\n# wait(3,SECONDS)\n# close_wings()\n\nwhile True:\n    axis.info()\n    adjust_direction(axis)\n\n    if axis.x > -700:\n        driver.drive(FORWARD)\n    else:\n        driver.stop()","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}